// Auto generated by sqlw-mysql (https://github.com/huangjunwen/sqlw-mysql) default template.
// DON NOT EDIT.

package models

import (
	"context"
	"database/sql"
)

// Execer is the common interface to execute a query without returning any row.
type Execer interface {
	ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error)
}

// Queryer is the common interface to execute a query returning row(s).
type Queryer interface {
	QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)
	QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row
}

// ExecQueryer = Execer + Queryer
type ExecQueryer interface {
	Execer
	Queryer
}

// ColumnScanner represents a collection of columns that can be scanned into from a row.
type ColumnScanner interface {
	// nxPreScan appends all columns to dest for scanning.
	nxPreScan(dest *[]interface{})

	// nxPostScan must be called after scanning to do some extra processsing.
	nxPostScan() error
}

// TableRow represents a table's row.
type TableRow interface {
	ColumnScanner

	// TableMeta returns the table's meta information.
	TableMeta() *TableMeta

	// Valid returns true if this is a valid table row (e.g. not NULL).
	Valid() bool

	// ColumnValue returns the i-th column value.
	ColumnValue(i int) interface{}

	// ColumnPointer returns the i-th column's pointer.
	ColumnPointer(i int) interface{}
}

// TableRowWithPrimary represents row of table with primary key.
type TableRowWithPrimary interface {
	TableRow

	// PrimaryValue returns the primary key value of this row.
	// The returned value is comparable by values.
	PrimaryValue() interface{}
}

// Slicer represents an appendable slice.
type Slicer interface {
	// nxLen returns the length of the slice.
	nxLen() int

	// nxItem returns the i-th item of the slice. i should be within [0, nxLen()), otherwise a panic will be raised.
	nxItem(i int) interface{}

	// nxAppend appends an item to the slice. If item is nil, then a valid empty item should be appended.
	nxAppend(item interface{})
}

var (
	_ ExecQueryer = (*sql.DB)(nil)
	_ ExecQueryer = (*sql.Conn)(nil)
	_ ExecQueryer = (*sql.Tx)(nil)
)
